
from abc import ABC, abstractmethod

from pyass.event import Event
from pyass.style import Style

class Section(ABC):
    @abstractmethod
    def header(self) -> str:
        raise NotImplementedError

class ScriptInfoSection(list[tuple[str, str]], Section):
    def __init__(self, *args):
        super().__init__(*args)

        if len(self) == 0:
            self.extend([
                ('', 'Script generated by pyass'),
                ('Title', 'Default Aegisub file'),
                ('Script Type', 'v4.00+'),
                ('Wrap Style', '0'),
                ('ScaledBorderAndShadow', 'yes'),
                ('YCbCr Matrix', 'None')
            ])
        
    def __str__(self) -> str:
        return '\n'.join([f'{k}: {v}' if k else f'; {v}' for k, v in self])

    def header(self) -> str:
        return 'Script Info'

class AegisubGarbageSection(list[tuple[str, str]], Section):
    def __str__(self) -> str:
        return '\n'.join([f'{k}: {v}' for k, v in self])

    def header(self) -> str:
        return 'Aegisub Project Garbage'

class StylesSection(list[Style], Section):
    def __str__(self) -> str:
        return '\n'.join([
            'Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding',
            *[str(style) for style in self]
        ])

    def header(self) -> str:
        return 'V4+ Styles'

class EventsSection(list[Event], Section):
    def __str__(self) -> str:
        return '\n'.join([
            'Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text',
            *[str(event) for event in self]
        ])

    def header(self) -> str:
        return 'Events'
